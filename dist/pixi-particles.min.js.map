{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ts-dist/AnimatedParticle.js","ts-dist/Emitter.js","ts-dist/Particle.js","ts-dist/ParticleUtils.js","ts-dist/PathParticle.js","ts-dist/PropertyList.js","ts-dist/PropertyNode.js","ts-dist/particles.js","ts-dist"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiParticles","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Particle_1","Texture","PIXI","AnimatedParticle","_super","emitter","_this","textures","duration","framerate","elapsed","loop","init","Particle_init","maxLife","applyArt","art","update","delta","lerp","Particle_update","frame","texture","EMPTY","destroy","Particle_destroy","parseArt","data","output","tex","outTextures","outArr","j","push","fromImage","dupe","count","default","ParticleUtils_1","PropertyNode_1","ticker","shared","helperPoint","Point","Emitter","particleParent","particleImages","config","aaa","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","acceleration","maxSpeed","NaN","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","noRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","extraData","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","particlesPerWave","particleSpacing","angleStart","rotation","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","parent","recycle","rotate","updateSpawnPos","updateOwnerPos","get","set","enumerable","configurable","cleanup","particle","next","isArray","slice","partClass","alpha","createList","speed","x","y","scale","color","startRotation","min","max","rotationSpeed","lifetime","getBlendMode","blendMode","ease","generateEase","parseData","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","spawnPolygonalChain","map","point","frequency","pos","clone","emit","undefined","autoUpdate","prev","removeChild","newRot","diff","rotatePoint","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","Math","random","emitPosX","emitPosY","len","particleConstructor","floor","alphaList","reset","speedMultiplier","speedList","scaleMultiplier","scaleList","colorList","children","shift","pop","index","indexOf","splice","unshift","addChildAt","addChild","position","width","height","radius","angle","partOfChain","pointer0","pointer1","point0","point1","helperX","helperY","PropertyList_1","Sprite","Particle","anchor","velocity","age","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","Sprite_destroy","kill","current","DEG_TO_RADS","tint","combineRGBComponents","visible","interpolate","normalize","scaleBy","currentSpeed","atan2","verbose","baseTexture","console","warn","BLEND_MODES","ParticleUtils","PI","sin","c","cos","xnew","ynew","oneOverLen","sqrt","hexToRGB","charAt","substr","parseInt","segments","qty","oneOverQty","time","cp","name","NORMAL","toUpperCase","replace","createSteppedGradient","list","numSteps","first","isStepped","currentNode","nextIndex","curVal","nextVal","MATH_FUNCS","WHITELISTER","RegExp","concat","join","parsePath","pathString","matches","match","Function","PathParticle","path","initialRotation","initialPosition","movement","error","intValueSimple","intColorSimple","intValueComplex","intColorComplex","intValueStepped","intColorStepped","PropertyList","isColor","PropertyNode","array","node","start","end","ParticleUtils_js_1","Particle_js_1","Emitter_js_1","PathParticle_js_1","AnimatedParticle_js_1","particles","prop"],"mappings":"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","file":"pixi-particles.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Particle_1 = require(\"./Particle\");\r\nvar Texture = PIXI.Texture;\r\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n *     {\r\n *         //framerate is required. It is the animation speed of the particle in frames per\r\n *         //second.\r\n *         //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *         //particle, instead of at a constant framerate. This causes the animation to play\r\n *         //through one time, completing when the particle expires.\r\n *         framerate: 6,\r\n *         //loop is optional, and defaults to false.\r\n *         loop: true,\r\n *         //textures is required, and can be an array of any (non-zero) length.\r\n *         textures: [\r\n *             //each entry represents a single texture that should be used for one or more\r\n *             //frames. Any strings will be converted to Textures with Texture.fromImage().\r\n *             //Instances of PIXI.Texture will be used directly.\r\n *             \"animFrame1.png\",\r\n *             //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *             //use that texture for 'count' frames sequentially.\r\n *             {\r\n *                 texture: \"animFrame2.png\",\r\n *                 count: 3\r\n *             },\r\n *             \"animFrame3.png\"\r\n *         ]\r\n *     }\r\n *\r\n * @memberof PIXI.particles\r\n * @class AnimatedParticle\r\n * @extends PIXI.particles.Particle\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this AnimatedParticle.\r\n */\r\nvar AnimatedParticle = /** @class */ (function (_super) {\r\n    __extends(AnimatedParticle, _super);\r\n    function AnimatedParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.textures = null;\r\n        _this.duration = 0;\r\n        _this.framerate = 0;\r\n        _this.elapsed = 0;\r\n        _this.loop = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.AnimatedParticle#init\r\n     */\r\n    AnimatedParticle.prototype.init = function () {\r\n        this.Particle_init();\r\n        this.elapsed = 0;\r\n        //if the animation needs to match the particle's life, then cacluate variables\r\n        if (this.framerate < 0) {\r\n            this.duration = this.maxLife;\r\n            this.framerate = this.textures.length / this.duration;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the textures for the particle.\r\n     * @method PIXI.particles.AnimatedParticle#applyArt\r\n     * @param {Array} art An array of PIXI.Texture objects for this animated particle.\r\n     */\r\n    AnimatedParticle.prototype.applyArt = function (art) {\r\n        this.textures = art.textures;\r\n        this.framerate = art.framerate;\r\n        this.duration = art.duration;\r\n        this.loop = art.loop;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.AnimatedParticle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    AnimatedParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //only animate the particle if it is still alive\r\n        if (lerp >= 0) {\r\n            this.elapsed += delta;\r\n            if (this.elapsed > this.duration) {\r\n                //loop elapsed back around\r\n                if (this.loop)\r\n                    this.elapsed = this.elapsed % this.duration;\r\n                else\r\n                    this.elapsed = this.duration - 0.000001;\r\n            }\r\n            var frame = (this.elapsed * this.framerate + 0.0000001) | 0;\r\n            this.texture = this.textures[frame] || PIXI.Texture.EMPTY;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.AnimatedParticle#destroy\r\n     */\r\n    AnimatedParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.textures = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @method PIXI.particles.AnimatedParticle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data, properly formatted for AnimatedParticle.\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    AnimatedParticle.parseArt = function (art) {\r\n        var data, output, textures, tex, outTextures;\r\n        var outArr = [];\r\n        for (var i = 0; i < art.length; ++i) {\r\n            data = art[i];\r\n            outArr[i] = output = {};\r\n            output.textures = outTextures = [];\r\n            textures = data.textures;\r\n            for (var j = 0; j < textures.length; ++j) {\r\n                tex = textures[j];\r\n                if (typeof tex == \"string\")\r\n                    outTextures.push(Texture.fromImage(tex));\r\n                else if (tex instanceof Texture)\r\n                    outTextures.push(tex);\r\n                else {\r\n                    var dupe = tex.count || 1;\r\n                    if (typeof tex.texture == \"string\")\r\n                        tex = Texture.fromImage(tex.texture);\r\n                    else\r\n                        tex = tex.texture;\r\n                    for (; dupe > 0; --dupe) {\r\n                        outTextures.push(tex);\r\n                    }\r\n                }\r\n            }\r\n            //use these values to signify that the animation should match the particle life time.\r\n            if (data.framerate == \"matchLife\") {\r\n                //-1 means that it should be calculated\r\n                output.framerate = -1;\r\n                output.duration = 0;\r\n                output.loop = false;\r\n            }\r\n            else {\r\n                //determine if the animation should loop\r\n                output.loop = !!data.loop;\r\n                //get the framerate, default to 60\r\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\r\n                //determine the duration\r\n                output.duration = outTextures.length / output.framerate;\r\n            }\r\n        }\r\n        return outArr;\r\n    };\r\n    return AnimatedParticle;\r\n}(Particle_1.default));\r\nexports.default = AnimatedParticle;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\r\nvar Particle_1 = require(\"./Particle\");\r\nvar PropertyNode_1 = require(\"./PropertyNode\");\r\nvar ticker = PIXI.ticker.shared;\r\nvar helperPoint = new PIXI.Point();\r\n/**\r\n * A particle emitter.\r\n * @memberof PIXI.particles\r\n * @class Emitter\r\n * @constructor\r\n * @param {PIXI.Container} particleParent The container to add the\r\n *                                                     particles to.\r\n * @param {Array|PIXI.Texture|String} [particleImages] A texture or array of textures to use\r\n *                                                     for the particles. Strings will be turned\r\n *                                                     into textures via Texture.fromImage().\r\n * @param {Object} [config] A configuration object containing settings for the emitter.\r\n * @param {Boolean} [config.emit=true] If config.emit is explicitly passed as false, the Emitter\r\n *                                     will start disabled.\r\n * @param {Boolean} [config.autoUpdate=false] If config.emit is explicitly passed as true, the Emitter\r\n *                                     will automatically call update via the PIXI shared ticker.\r\n */\r\nvar Emitter = /** @class */ (function () {\r\n    function Emitter(particleParent, particleImages, config) {\r\n        /**\r\n         * Positions a particle for polygonal chain.\r\n         * @method PIXI.particles.Emitter#_spawnPolygonal\r\n         * @private\r\n         * @param {Particle} p The particle to position and rotate.\r\n         * @param {Number} emitPosX The emitter's x position\r\n         * @param {Number} emitPosY The emitter's y position\r\n         * @param {int} i The particle number in the current wave. Not used for this function.\r\n         */\r\n        this.aaa = [];\r\n        this._particleConstructor = Particle_1.default;\r\n        //properties for individual particles\r\n        this.particleImages = null;\r\n        this.startAlpha = null;\r\n        this.startSpeed = null;\r\n        this.minimumSpeedMultiplier = 1;\r\n        this.acceleration = null;\r\n        this.maxSpeed = NaN;\r\n        this.startScale = null;\r\n        this.minimumScaleMultiplier = 1;\r\n        this.startColor = null;\r\n        this.minLifetime = 0;\r\n        this.maxLifetime = 0;\r\n        this.minStartRotation = 0;\r\n        this.maxStartRotation = 0;\r\n        this.noRotation = false;\r\n        this.minRotationSpeed = 0;\r\n        this.maxRotationSpeed = 0;\r\n        this.particleBlendMode = 0;\r\n        this.customEase = null;\r\n        this.extraData = null;\r\n        //properties for spawning particles\r\n        this._frequency = 1;\r\n        this.spawnChance = 1;\r\n        this.maxParticles = 1000;\r\n        this.emitterLifetime = -1;\r\n        this.spawnPos = null;\r\n        this.spawnType = null;\r\n        this._spawnFunc = null;\r\n        this.spawnRect = null;\r\n        this.spawnCircle = null;\r\n        this.particlesPerWave = 1;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        //emitter properties\r\n        this.rotation = 0;\r\n        this.ownerPos = null;\r\n        this._prevEmitterPos = null;\r\n        this._prevPosIsValid = false;\r\n        this._posChanged = false;\r\n        this._parent = null;\r\n        this.addAtBack = false;\r\n        this.particleCount = 0;\r\n        this._emit = false;\r\n        this._spawnTimer = 0;\r\n        this._emitterLife = -1;\r\n        this._activeParticlesFirst = null;\r\n        this._activeParticlesLast = null;\r\n        this._poolFirst = null;\r\n        this._origConfig = null;\r\n        this._origArt = null;\r\n        this._autoUpdate = false;\r\n        this._destroyWhenComplete = false;\r\n        this._completeCallback = null;\r\n        //set the initial parent\r\n        this.parent = particleParent;\r\n        if (particleImages && config)\r\n            this.init(particleImages, config);\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        this.recycle = this.recycle;\r\n        this.update = this.update;\r\n        this.rotate = this.rotate;\r\n        this.updateSpawnPos = this.updateSpawnPos;\r\n        this.updateOwnerPos = this.updateOwnerPos;\r\n    }\r\n    Object.defineProperty(Emitter.prototype, \"frequency\", {\r\n        /**\r\n         * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n         * it will be set to 1 (particle per second) to prevent infinite loops.\r\n         * @member {Number} PIXI.particles.Emitter#frequency\r\n         */\r\n        get: function () { return this._frequency; },\r\n        set: function (value) {\r\n            //do some error checking to prevent infinite loops\r\n            if (typeof value == \"number\" && value > 0)\r\n                this._frequency = value;\r\n            else\r\n                this._frequency = 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"particleConstructor\", {\r\n        /**\r\n         * The constructor used to create new particles. The default is\r\n         * the built in Particle class. Setting this will dump any active or\r\n         * pooled particles, if the emitter has already been used.\r\n         * @member {Function} PIXI.particles.Emitter#particleConstructor\r\n         */\r\n        get: function () { return this._particleConstructor; },\r\n        set: function (value) {\r\n            if (value != this._particleConstructor) {\r\n                this._particleConstructor = value;\r\n                //clean up existing particles\r\n                this.cleanup();\r\n                //scrap all the particles\r\n                for (var particle = this._poolFirst; particle; particle = particle.next) {\r\n                    particle.destroy();\r\n                }\r\n                this._poolFirst = null;\r\n                //re-initialize the emitter so that the new constructor can do anything it needs to\r\n                if (this._origConfig && this._origArt)\r\n                    this.init(this._origArt, this._origConfig);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Emitter.prototype, \"parent\", {\r\n        /**\r\n        * The container to add particles to. Settings this will dump any active particles.\r\n        * @member {PIXI.Container} PIXI.particles.Emitter#parent\r\n        */\r\n        get: function () { return this._parent; },\r\n        set: function (value) {\r\n            this.cleanup();\r\n            this._parent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets up the emitter based on the config settings.\r\n     * @method PIXI.particles.Emitter#init\r\n     * @param {Array|PIXI.Texture} art A texture or array of textures to use for the particles.\r\n     * @param {Object} config A configuration object containing settings for the emitter.\r\n     */\r\n    Emitter.prototype.init = function (art, config) {\r\n        if (!art || !config)\r\n            return;\r\n        //clean up any existing particles\r\n        this.cleanup();\r\n        //store the original config and particle images, in case we need to re-initialize\r\n        //when the particle constructor is changed\r\n        this._origConfig = config;\r\n        this._origArt = art;\r\n        //set up the array of data, also ensuring that it is an array\r\n        art = Array.isArray(art) ? art.slice() : [art];\r\n        //run the art through the particle class's parsing function\r\n        var partClass = this._particleConstructor;\r\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n        ///////////////////////////\r\n        // Particle Properties   //\r\n        ///////////////////////////\r\n        //set up the alpha\r\n        if (config.alpha) {\r\n            this.startAlpha = PropertyNode_1.default.createList(config.alpha);\r\n        }\r\n        else\r\n            this.startAlpha = new PropertyNode_1.default(1, 0);\r\n        //set up the speed\r\n        if (config.speed) {\r\n            this.startSpeed = PropertyNode_1.default.createList(config.speed);\r\n            this.minimumSpeedMultiplier = config.speed.minimumSpeedMultiplier || 1;\r\n        }\r\n        else {\r\n            this.minimumSpeedMultiplier = 1;\r\n            this.startSpeed = new PropertyNode_1.default(0, 0);\r\n        }\r\n        //set up acceleration\r\n        var acceleration = config.acceleration;\r\n        if (acceleration && (acceleration.x || acceleration.y)) {\r\n            //make sure we disable speed interpolation\r\n            this.startSpeed.next = null;\r\n            this.acceleration = new PIXI.Point(acceleration.x, acceleration.y);\r\n            this.maxSpeed = config.maxSpeed || NaN;\r\n        }\r\n        else\r\n            this.acceleration = new PIXI.Point();\r\n        //set up the scale\r\n        if (config.scale) {\r\n            this.startScale = PropertyNode_1.default.createList(config.scale);\r\n            this.minimumScaleMultiplier = config.scale.minimumScaleMultiplier || 1;\r\n        }\r\n        else {\r\n            this.startScale = new PropertyNode_1.default(1, 0);\r\n            this.minimumScaleMultiplier = 1;\r\n        }\r\n        //set up the color\r\n        if (config.color) {\r\n            this.startColor = PropertyNode_1.default.createList(config.color);\r\n        }\r\n        else {\r\n            this.startColor = new PropertyNode_1.default({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\r\n        }\r\n        //set up the start rotation\r\n        if (config.startRotation) {\r\n            this.minStartRotation = config.startRotation.min;\r\n            this.maxStartRotation = config.startRotation.max;\r\n        }\r\n        else\r\n            this.minStartRotation = this.maxStartRotation = 0;\r\n        if (config.noRotation &&\r\n            (this.minStartRotation || this.maxStartRotation)) {\r\n            this.noRotation = !!config.noRotation;\r\n        }\r\n        else\r\n            this.noRotation = false;\r\n        //set up the rotation speed\r\n        if (config.rotationSpeed) {\r\n            this.minRotationSpeed = config.rotationSpeed.min;\r\n            this.maxRotationSpeed = config.rotationSpeed.max;\r\n        }\r\n        else\r\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\r\n        //set up the lifetime\r\n        this.minLifetime = config.lifetime.min;\r\n        this.maxLifetime = config.lifetime.max;\r\n        //get the blend mode\r\n        this.particleBlendMode = ParticleUtils_1.default.getBlendMode(config.blendMode);\r\n        //use the custom ease if provided\r\n        if (config.ease) {\r\n            this.customEase = typeof config.ease == \"function\" ?\r\n                config.ease :\r\n                ParticleUtils_1.default.generateEase(config.ease);\r\n        }\r\n        else\r\n            this.customEase = null;\r\n        //set up the extra data, running it through the particle class's parseData function.\r\n        if (partClass.parseData)\r\n            this.extraData = partClass.parseData(config.extraData);\r\n        else\r\n            this.extraData = config.extraData || null;\r\n        //////////////////////////\r\n        // Emitter Properties   //\r\n        //////////////////////////\r\n        //reset spawn type specific settings\r\n        this.spawnRect = this.spawnCircle = null;\r\n        this.particlesPerWave = 1;\r\n        if (config.particlesPerWave && config.particlesPerWave > 1)\r\n            this.particlesPerWave = config.particlesPerWave;\r\n        this.particleSpacing = 0;\r\n        this.angleStart = 0;\r\n        var spawnCircle;\r\n        //determine the spawn function to use\r\n        switch (config.spawnType) {\r\n            case \"rect\":\r\n                this.spawnType = \"rect\";\r\n                this._spawnFunc = this._spawnRect;\r\n                var spawnRect = config.spawnRect;\r\n                this.spawnRect = new PIXI.Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n                break;\r\n            case \"circle\":\r\n                this.spawnType = \"circle\";\r\n                this._spawnFunc = this._spawnCircle;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                break;\r\n            case \"ring\":\r\n                this.spawnType = \"ring\";\r\n                this._spawnFunc = this._spawnRing;\r\n                spawnCircle = config.spawnCircle;\r\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\r\n                this.spawnCircle.minRadius = spawnCircle.minR;\r\n                break;\r\n            case \"burst\":\r\n                this.spawnType = \"burst\";\r\n                this._spawnFunc = this._spawnBurst;\r\n                this.particleSpacing = config.particleSpacing;\r\n                this.angleStart = config.angleStart ? config.angleStart : 0;\r\n                break;\r\n            case \"point\":\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n            case \"polygonalChain\":\r\n                this.spawnType = \"polygonalChain\";\r\n                this._spawnFunc = this._spawnPolygonalChain;\r\n                if (!config.spawnPolygon || !config.spawnPolygon.length) {\r\n                    config.spawnPolygon = [{ x: 0, y: 0 }];\r\n                }\r\n                this.spawnPolygonalChain = config.spawnPolygon.map(function (point) {\r\n                    return { x: point.x || 0, y: point.y || 0 };\r\n                });\r\n                break;\r\n            default:\r\n                this.spawnType = \"point\";\r\n                this._spawnFunc = this._spawnPoint;\r\n                break;\r\n        }\r\n        //set the spawning frequency\r\n        this.frequency = config.frequency;\r\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n        //set the emitter lifetime\r\n        this.emitterLifetime = config.emitterLifetime || -1;\r\n        //set the max particles\r\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n        //determine if we should add the particle at the back of the list or not\r\n        this.addAtBack = !!config.addAtBack;\r\n        //reset the emitter position and rotation variables\r\n        this.rotation = 0;\r\n        this.ownerPos = new PIXI.Point();\r\n        this.spawnPos = new PIXI.Point(config.pos.x, config.pos.y);\r\n        this._prevEmitterPos = this.spawnPos.clone();\r\n        //previous emitter position is invalid and should not be used for interpolation\r\n        this._prevPosIsValid = false;\r\n        //start emitting\r\n        this._spawnTimer = 0;\r\n        this.emit = config.emit === undefined ? true : !!config.emit;\r\n        this.autoUpdate = config.autoUpdate === undefined ? false : !!config.autoUpdate;\r\n    };\r\n    /**\r\n     * Recycles an individual particle.\r\n     * @method PIXI.particles.Emitter#recycle\r\n     * @param {Particle} particle The particle to recycle.\r\n     * @private\r\n     */\r\n    Emitter.prototype.recycle = function (particle) {\r\n        if (particle.next)\r\n            particle.next.prev = particle.prev;\r\n        if (particle.prev)\r\n            particle.prev.next = particle.next;\r\n        if (particle == this._activeParticlesLast)\r\n            this._activeParticlesLast = particle.prev;\r\n        if (particle == this._activeParticlesFirst)\r\n            this._activeParticlesFirst = particle.next;\r\n        //add to pool\r\n        particle.prev = null;\r\n        particle.next = this._poolFirst;\r\n        this._poolFirst = particle;\r\n        //remove child from display, or make it invisible if it is in a ParticleContainer\r\n        if (particle.parent)\r\n            particle.parent.removeChild(particle);\r\n        //decrease count\r\n        --this.particleCount;\r\n    };\r\n    /**\r\n     * Sets the rotation of the emitter to a new value.\r\n     * @method PIXI.particles.Emitter#rotate\r\n     * @param {Number} newRot The new rotation, in degrees.\r\n     */\r\n    Emitter.prototype.rotate = function (newRot) {\r\n        if (this.rotation == newRot)\r\n            return;\r\n        //caclulate the difference in rotation for rotating spawnPos\r\n        var diff = newRot - this.rotation;\r\n        this.rotation = newRot;\r\n        //rotate spawnPos\r\n        ParticleUtils_1.default.rotatePoint(diff, this.spawnPos);\r\n        //mark the position as having changed\r\n        this._posChanged = true;\r\n    };\r\n    /**\r\n     * Changes the spawn position of the emitter.\r\n     * @method PIXI.particles.Emitter#updateSpawnPos\r\n     * @param {Number} x The new x value of the spawn position for the emitter.\r\n     * @param {Number} y The new y value of the spawn position for the emitter.\r\n     */\r\n    Emitter.prototype.updateSpawnPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.spawnPos.x = x;\r\n        this.spawnPos.y = y;\r\n    };\r\n    /**\r\n     * Changes the position of the emitter's owner. You should call this if you are adding\r\n     * particles to the world container that your emitter's owner is moving around in.\r\n     * @method PIXI.particles.Emitter#updateOwnerPos\r\n     * @param {Number} x The new x value of the emitter's owner.\r\n     * @param {Number} y The new y value of the emitter's owner.\r\n     */\r\n    Emitter.prototype.updateOwnerPos = function (x, y) {\r\n        this._posChanged = true;\r\n        this.ownerPos.x = x;\r\n        this.ownerPos.y = y;\r\n    };\r\n    /**\r\n     * Prevents emitter position interpolation in the next update.\r\n     * This should be used if you made a major position change of your emitter's owner\r\n     * that was not normal movement.\r\n     * @method PIXI.particles.Emitter#resetPositionTracking\r\n     */\r\n    Emitter.prototype.resetPositionTracking = function () {\r\n        this._prevPosIsValid = false;\r\n    };\r\n    Object.defineProperty(Emitter.prototype, \"emit\", {\r\n        /**\r\n         * If particles should be emitted during update() calls. Setting this to false\r\n         * stops new particles from being created, but allows existing ones to die out.\r\n         * @member {Boolean} PIXI.particles.Emitter#emit\r\n         */\r\n        get: function () { return this._emit; },\r\n        set: function (value) {\r\n            this._emit = !!value;\r\n            this._emitterLife = this.emitterLifetime;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    Object.defineProperty(Emitter.prototype, \"autoUpdate\", {\r\n        /**\r\n         * If the update function is called automatically from the shared ticker.\r\n         * Setting this to false requires calling the update function manually.\r\n         * @member {Boolean} PIXI.particles.Emitter#autoUpdate\r\n         */\r\n        get: function () { return this._autoUpdate; },\r\n        set: function (value) {\r\n            if (this._autoUpdate && !value) {\r\n                ticker.remove(this.update, this);\r\n            }\r\n            else if (!this._autoUpdate && value) {\r\n                ticker.add(this.update, this);\r\n            }\r\n            this._autoUpdate = !!value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n     * when particle emission is complete.\r\n     * @method PIXI.particles.Emitter#playOnceAndDestroy\r\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnceAndDestroy = function (callback) {\r\n        this.autoUpdate = true;\r\n        this.emit = true;\r\n        this._destroyWhenComplete = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n     * @method PIXI.particles.Emitter#playOnce\r\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\r\n     */\r\n    Emitter.prototype.playOnce = function (callback) {\r\n        this.emit = true;\r\n        this._completeCallback = callback;\r\n    };\r\n    /**\r\n     * Updates all particles spawned by this emitter and emits new ones.\r\n     * @method PIXI.particles.Emitter#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    Emitter.prototype.update = function (delta) {\r\n        if (this._autoUpdate) {\r\n            delta = delta / PIXI.settings.TARGET_FPMS / 1000;\r\n        }\r\n        //if we don't have a parent to add particles to, then don't do anything.\r\n        //this also works as a isDestroyed check\r\n        if (!this._parent)\r\n            return;\r\n        //update existing particles\r\n        var i, particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            particle.update(delta);\r\n        }\r\n        var prevX, prevY;\r\n        //if the previous position is valid, store these for later interpolation\r\n        if (this._prevPosIsValid) {\r\n            prevX = this._prevEmitterPos.x;\r\n            prevY = this._prevEmitterPos.y;\r\n        }\r\n        //store current position of the emitter as local variables\r\n        var curX = this.ownerPos.x + this.spawnPos.x;\r\n        var curY = this.ownerPos.y + this.spawnPos.y;\r\n        //spawn new particles\r\n        if (this._emit) {\r\n            //decrease spawn timer\r\n            this._spawnTimer -= delta < 0 ? 0 : delta;\r\n            //while _spawnTimer < 0, we have particles to spawn\r\n            while (this._spawnTimer <= 0) {\r\n                //determine if the emitter should stop spawning\r\n                if (this._emitterLife > 0) {\r\n                    this._emitterLife -= this._frequency;\r\n                    if (this._emitterLife <= 0) {\r\n                        this._spawnTimer = 0;\r\n                        this._emitterLife = 0;\r\n                        this.emit = false;\r\n                        break;\r\n                    }\r\n                }\r\n                //determine if we have hit the particle limit\r\n                if (this.particleCount >= this.maxParticles) {\r\n                    this._spawnTimer += this._frequency;\r\n                    continue;\r\n                }\r\n                //determine the particle lifetime\r\n                var lifetime = void 0;\r\n                if (this.minLifetime == this.maxLifetime)\r\n                    lifetime = this.minLifetime;\r\n                else\r\n                    lifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\r\n                //only make the particle if it wouldn't immediately destroy itself\r\n                if (-this._spawnTimer < lifetime) {\r\n                    //If the position has changed and this isn't the first spawn,\r\n                    //interpolate the spawn position\r\n                    var emitPosX = void 0, emitPosY = void 0;\r\n                    if (this._prevPosIsValid && this._posChanged) {\r\n                        //1 - _spawnTimer / delta, but _spawnTimer is negative\r\n                        var lerp = 1 + this._spawnTimer / delta;\r\n                        emitPosX = (curX - prevX) * lerp + prevX;\r\n                        emitPosY = (curY - prevY) * lerp + prevY;\r\n                    }\r\n                    else {\r\n                        emitPosX = curX;\r\n                        emitPosY = curY;\r\n                    }\r\n                    //create enough particles to fill the wave (non-burst types have a wave of 1)\r\n                    i = 0;\r\n                    for (var len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i) {\r\n                        //see if we actually spawn one\r\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n                            continue;\r\n                        //create particle\r\n                        var p = void 0;\r\n                        if (this._poolFirst) {\r\n                            p = this._poolFirst;\r\n                            this._poolFirst = this._poolFirst.next;\r\n                            p.next = null;\r\n                        }\r\n                        else {\r\n                            p = new this.particleConstructor(this);\r\n                        }\r\n                        //set a random texture if we have more than one\r\n                        if (this.particleImages.length > 1) {\r\n                            p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n                        }\r\n                        else {\r\n                            //if they are actually the same texture, a standard particle\r\n                            //will quit early from the texture setting in setTexture().\r\n                            p.applyArt(this.particleImages[0]);\r\n                        }\r\n                        //set up the start and end values\r\n                        p.alphaList.reset(this.startAlpha);\r\n                        if (this.minimumSpeedMultiplier != 1) {\r\n                            p.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\r\n                        }\r\n                        p.speedList.reset(this.startSpeed);\r\n                        p.acceleration.x = this.acceleration.x;\r\n                        p.acceleration.y = this.acceleration.y;\r\n                        p.maxSpeed = this.maxSpeed;\r\n                        if (this.minimumScaleMultiplier != 1) {\r\n                            p.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\r\n                        }\r\n                        p.scaleList.reset(this.startScale);\r\n                        p.colorList.reset(this.startColor);\r\n                        //randomize the rotation speed\r\n                        if (this.minRotationSpeed == this.maxRotationSpeed)\r\n                            p.rotationSpeed = this.minRotationSpeed;\r\n                        else\r\n                            p.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\r\n                        p.noRotation = this.noRotation;\r\n                        //set up the lifetime\r\n                        p.maxLife = lifetime;\r\n                        //set the blend mode\r\n                        p.blendMode = this.particleBlendMode;\r\n                        //set the custom ease, if any\r\n                        p.ease = this.customEase;\r\n                        //set the extra data, if any\r\n                        p.extraData = this.extraData;\r\n                        //call the proper function to handle rotation and position of particle\r\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\r\n                        //initialize particle\r\n                        p.init();\r\n                        //update the particle by the time passed, so the particles are spread out properly\r\n                        p.update(-this._spawnTimer); //we want a positive delta, because a negative delta messes things up\r\n                        //add the particle to the display list\r\n                        if (!p.parent) {\r\n                            if (this.addAtBack)\r\n                                this._parent.addChildAt(p, 0);\r\n                            else\r\n                                this._parent.addChild(p);\r\n                        }\r\n                        else {\r\n                            //kind of hacky, but performance friendly\r\n                            //shuffle children to correct place\r\n                            var children = this._parent.children;\r\n                            //avoid using splice if possible\r\n                            if (children[0] == p)\r\n                                children.shift();\r\n                            else if (children[children.length - 1] == p)\r\n                                children.pop();\r\n                            else {\r\n                                var index = children.indexOf(p);\r\n                                children.splice(index, 1);\r\n                            }\r\n                            if (this.addAtBack)\r\n                                children.unshift(p);\r\n                            else\r\n                                children.push(p);\r\n                        }\r\n                        //add particle to list of active particles\r\n                        if (this._activeParticlesLast) {\r\n                            this._activeParticlesLast.next = p;\r\n                            p.prev = this._activeParticlesLast;\r\n                            this._activeParticlesLast = p;\r\n                        }\r\n                        else {\r\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\r\n                        }\r\n                        ++this.particleCount;\r\n                    }\r\n                }\r\n                //increase timer and continue on to any other particles that need to be created\r\n                this._spawnTimer += this._frequency;\r\n            }\r\n        }\r\n        //if the position changed before this update, then keep track of that\r\n        if (this._posChanged) {\r\n            this._prevEmitterPos.x = curX;\r\n            this._prevEmitterPos.y = curY;\r\n            this._prevPosIsValid = true;\r\n            this._posChanged = false;\r\n        }\r\n        //if we are all done and should destroy ourselves, take care of that\r\n        if (!this._emit && !this._activeParticlesFirst) {\r\n            if (this._completeCallback) {\r\n                this._completeCallback();\r\n            }\r\n            if (this._destroyWhenComplete) {\r\n                this.destroy();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions a particle for a point type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnPoint\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnPoint = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on\r\n        //starting particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Positions a particle for a rectangle type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnRect\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRect = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n        //place the particle at a random point in the rectangle\r\n        helperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\r\n        helperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a circle type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnCircle\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnCircle = function (p, emitPosX, emitPosY) {\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the circle\r\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        ParticleUtils_1.default.rotatePoint(Math.random() * 360, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    /**\r\n     * Positions a particle for a ring type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnRing\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave. Not used for this function.\r\n     */\r\n    Emitter.prototype._spawnRing = function (p, emitPosX, emitPosY) {\r\n        var spawnCircle = this.spawnCircle;\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        //place the particle at a random radius in the ring\r\n        if (spawnCircle.minRadius !== spawnCircle.radius) {\r\n            helperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\r\n                spawnCircle.minRadius;\r\n        }\r\n        else\r\n            helperPoint.x = spawnCircle.radius;\r\n        helperPoint.y = 0;\r\n        //rotate the point to a random angle in the circle\r\n        var angle = Math.random() * 360;\r\n        p.rotation += angle;\r\n        ParticleUtils_1.default.rotatePoint(angle, helperPoint);\r\n        //offset by the circle's center\r\n        helperPoint.x += this.spawnCircle.x;\r\n        helperPoint.y += this.spawnCircle.y;\r\n        //rotate the point by the emitter's rotation\r\n        if (this.rotation !== 0)\r\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\r\n        //set the position, offset by the emitter's position\r\n        p.position.x = emitPosX + helperPoint.x;\r\n        p.position.y = emitPosY + helperPoint.y;\r\n    };\r\n    Emitter.prototype._spawnPolygonalChain = function (p, emitPosX, emitPosY) {\r\n        var spawnPolygonalChain = this.spawnPolygonalChain;\r\n        //set the initial rotation/direction of the particle based on starting\r\n        //particle angle and rotation of emitter\r\n        if (this.minStartRotation == this.maxStartRotation)\r\n            p.rotation = this.minStartRotation + this.rotation;\r\n        else\r\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n                this.minStartRotation + this.rotation;\r\n        var partOfChain = ~~(1 + Math.random() * (spawnPolygonalChain.length - 1));\r\n        var pointer0 = partOfChain - 1;\r\n        var pointer1 = partOfChain > spawnPolygonalChain.length - 1 ?\r\n            spawnPolygonalChain.length - 1 :\r\n            partOfChain;\r\n        var point0 = spawnPolygonalChain[pointer0];\r\n        var point1 = spawnPolygonalChain[pointer1];\r\n        var helperX = point0.x;\r\n        var helperY = point0.y;\r\n        if (point1.x !== point0.x) {\r\n            helperX = (point0.x + Math.random() * (point1.x - point0.x));\r\n            helperY = (point0.y + (point1.y - point0.y) * (helperX - point0.x) / (point1.x - point0.x));\r\n        }\r\n        else {\r\n            helperY = (point0.y + Math.random() * (point1.y - point0.y));\r\n        }\r\n        p.position.x = emitPosX + helperX;\r\n        p.position.y = emitPosY + helperY;\r\n    };\r\n    /**\r\n     * Positions a particle for a burst type emitter.\r\n     * @method PIXI.particles.Emitter#_spawnBurst\r\n     * @private\r\n     * @param {Particle} p The particle to position and rotate.\r\n     * @param {Number} emitPosX The emitter's x position\r\n     * @param {Number} emitPosY The emitter's y position\r\n     * @param {int} i The particle number in the current wave.\r\n     */\r\n    Emitter.prototype._spawnBurst = function (p, emitPosX, emitPosY, i) {\r\n        //set the initial rotation/direction of the particle based on spawn\r\n        //angle and rotation of emitter\r\n        if (this.particleSpacing === 0)\r\n            p.rotation = Math.random() * 360;\r\n        else\r\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n        //drop the particle at the emitter's position\r\n        p.position.x = emitPosX;\r\n        p.position.y = emitPosY;\r\n    };\r\n    /**\r\n     * Kills all active particles immediately.\r\n     * @method PIXI.particles.Emitter#cleanup\r\n     */\r\n    Emitter.prototype.cleanup = function () {\r\n        var particle, next;\r\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\r\n            next = particle.next;\r\n            this.recycle(particle);\r\n            if (particle.parent)\r\n                particle.parent.removeChild(particle);\r\n        }\r\n        this._activeParticlesFirst = this._activeParticlesLast = null;\r\n        this.particleCount = 0;\r\n    };\r\n    /**\r\n     * Destroys the emitter and all of its particles.\r\n     * @method PIXI.particles.Emitter#destroy\r\n     */\r\n    Emitter.prototype.destroy = function () {\r\n        //make sure we aren't still listening to any tickers\r\n        this.autoUpdate = false;\r\n        //puts all active particles in the pool, and removes them from the particle parent\r\n        this.cleanup();\r\n        //wipe the pool clean\r\n        var next;\r\n        for (var particle = this._poolFirst; particle; particle = next) {\r\n            //store next value so we don't lose it in our destroy call\r\n            next = particle.next;\r\n            particle.destroy();\r\n        }\r\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\r\n            this.startColor = this.startScale = this.startAlpha = this.startSpeed =\r\n                this.customEase = this._completeCallback = null;\r\n    };\r\n    return Emitter;\r\n}());\r\nexports.default = Emitter;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\r\nvar PropertyList_1 = require(\"./PropertyList\");\r\nvar Sprite = PIXI.Sprite;\r\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n * @memberof PIXI.particles\r\n * @class Particle\r\n * @extends PIXI.Sprite\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n */\r\nvar Particle = /** @class */ (function (_super) {\r\n    __extends(Particle, _super);\r\n    function Particle(emitter) {\r\n        var _this = \r\n        //start off the sprite with a blank texture, since we are going to replace it\r\n        //later when the particle is initialized.\r\n        _super.call(this) || this;\r\n        _this.emitter = emitter;\r\n        //particles should be centered\r\n        _this.anchor.x = _this.anchor.y = 0.5;\r\n        _this.velocity = new PIXI.Point();\r\n        _this.maxLife = 0;\r\n        _this.age = 0;\r\n        _this.ease = null;\r\n        _this.extraData = null;\r\n        _this.alphaList = new PropertyList_1.default();\r\n        _this.speedList = new PropertyList_1.default();\r\n        _this.speedMultiplier = 1;\r\n        /**\r\n         * Acceleration to apply to the particle.\r\n         * @property {PIXI.Point} accleration\r\n         */\r\n        _this.acceleration = new PIXI.Point();\r\n        /**\r\n         * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n         * will disable the maximum speed.\r\n         * @property {Number} maxSpeed\r\n         * @default NaN\r\n         */\r\n        _this.maxSpeed = NaN;\r\n        /**\r\n         * The scale of the particle throughout its life.\r\n         * @property {PIXI.particles.PropertyList} scaleList\r\n         */\r\n        _this.scaleList = new PropertyList_1.default();\r\n        /**\r\n         * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n         * @property {number} scaleMultiplier\r\n         */\r\n        _this.scaleMultiplier = 1;\r\n        /**\r\n         * The tint of the particle throughout its life.\r\n         * @property {PIXI.particles.PropertyList} colorList\r\n         */\r\n        _this.colorList = new PropertyList_1.default(true);\r\n        /**\r\n         * If alpha should be interpolated at all.\r\n         * @property {Boolean} _doAlpha\r\n         * @private\r\n         */\r\n        _this._doAlpha = false;\r\n        /**\r\n         * If scale should be interpolated at all.\r\n         * @property {Boolean} _doScale\r\n         * @private\r\n         */\r\n        _this._doScale = false;\r\n        /**\r\n         * If speed should be interpolated at all.\r\n         * @property {Boolean} _doSpeed\r\n         * @private\r\n         */\r\n        _this._doSpeed = false;\r\n        /**\r\n         * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n         * and _doSpeed gets priority.\r\n         * @property {Boolean} _doAcceleration\r\n         * @private\r\n         */\r\n        _this._doAcceleration = false;\r\n        /**\r\n         * If color should be interpolated at all.\r\n         * @property {Boolean} _doColor\r\n         * @private\r\n         */\r\n        _this._doColor = false;\r\n        /**\r\n         * If normal movement should be handled. Subclasses wishing to override movement\r\n         * can set this to false in init().\r\n         * @property {Boolean} _doNormalMovement\r\n         * @private\r\n         */\r\n        _this._doNormalMovement = false;\r\n        /**\r\n         * One divided by the max life of the particle, saved for slightly faster math.\r\n         * @property {Number} _oneOverLife\r\n         * @private\r\n         */\r\n        _this._oneOverLife = 0;\r\n        /**\r\n         * Reference to the next particle in the list.\r\n         * @property {Particle} next\r\n         * @private\r\n         */\r\n        _this.next = null;\r\n        /**\r\n         * Reference to the previous particle in the list.\r\n         * @property {Particle} prev\r\n         * @private\r\n         */\r\n        _this.prev = null;\r\n        //save often used functions on the instance instead of the prototype for better speed\r\n        _this.init = _this.init;\r\n        _this.Particle_init = Particle.prototype.init;\r\n        _this.update = _this.update;\r\n        _this.Particle_update = Particle.prototype.update;\r\n        _this.Sprite_destroy = _super.prototype.destroy;\r\n        _this.Particle_destroy = Particle.prototype.destroy;\r\n        _this.applyArt = _this.applyArt;\r\n        _this.kill = _this.kill;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.Particle#init\r\n     */\r\n    Particle.prototype.init = function () {\r\n        //reset the age\r\n        this.age = 0;\r\n        //set up the velocity based on the start speed and rotation\r\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n        this.velocity.y = 0;\r\n        ParticleUtils_1.default.rotatePoint(this.rotation, this.velocity);\r\n        if (this.noRotation) {\r\n            this.rotation = 0;\r\n        }\r\n        else {\r\n            //convert rotation to Radians from Degrees\r\n            this.rotation *= ParticleUtils_1.default.DEG_TO_RADS;\r\n        }\r\n        //convert rotation speed to Radians from Degrees\r\n        this.rotationSpeed *= ParticleUtils_1.default.DEG_TO_RADS;\r\n        //set alpha to inital alpha\r\n        this.alpha = this.alphaList.current.value;\r\n        //set scale to initial scale\r\n        this.scale.x = this.scale.y = this.scaleList.current.value;\r\n        //figure out what we need to interpolate\r\n        this._doAlpha = !!this.alphaList.current.next;\r\n        this._doSpeed = !!this.speedList.current.next;\r\n        this._doScale = !!this.scaleList.current.next;\r\n        this._doColor = !!this.colorList.current.next;\r\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n        //_doNormalMovement can be cancelled by subclasses\r\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n        //save our lerp helper\r\n        this._oneOverLife = 1 / this.maxLife;\r\n        //set the inital color\r\n        var color = this.colorList.current.value;\r\n        this.tint = ParticleUtils_1.default.combineRGBComponents(color.r, color.g, color.b);\r\n        //ensure visibility\r\n        this.visible = true;\r\n    };\r\n    /**\r\n     * Sets the texture for the particle. This can be overridden to allow\r\n     * for an animated particle.\r\n     * @method PIXI.particles.Particle#applyArt\r\n     * @param {PIXI.Texture} art The texture to set.\r\n     */\r\n    Particle.prototype.applyArt = function (art) {\r\n        this.texture = art || PIXI.Texture.EMPTY;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.Particle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     * @return {Number} The standard interpolation multiplier (0-1) used for all relevant particle\r\n     *                   properties. A value of -1 means the particle died of old age instead.\r\n     */\r\n    Particle.prototype.update = function (delta) {\r\n        //increase age\r\n        this.age += delta;\r\n        //recycle particle if it is too old\r\n        if (this.age >= this.maxLife || this.age < 0) {\r\n            this.kill();\r\n            return -1;\r\n        }\r\n        //determine our interpolation value\r\n        var lerp = this.age * this._oneOverLife; //lifetime / maxLife;\r\n        if (this.ease) {\r\n            if (this.ease.length == 4) {\r\n                //the t, b, c, d parameters that some tween libraries use\r\n                //(time, initial value, end value, duration)\r\n                lerp = this.ease(lerp, 0, 1, 1);\r\n            }\r\n            else {\r\n                //the simplified version that we like that takes\r\n                //one parameter, time from 0-1. TweenJS eases provide this usage.\r\n                lerp = this.ease(lerp);\r\n            }\r\n        }\r\n        //interpolate alpha\r\n        if (this._doAlpha)\r\n            this.alpha = this.alphaList.interpolate(lerp);\r\n        //interpolate scale\r\n        if (this._doScale) {\r\n            var scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n            this.scale.x = this.scale.y = scale;\r\n        }\r\n        //handle movement\r\n        if (this._doNormalMovement) {\r\n            //interpolate speed\r\n            if (this._doSpeed) {\r\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n                ParticleUtils_1.default.normalize(this.velocity);\r\n                ParticleUtils_1.default.scaleBy(this.velocity, speed);\r\n            }\r\n            else if (this._doAcceleration) {\r\n                this.velocity.x += this.acceleration.x * delta;\r\n                this.velocity.y += this.acceleration.y * delta;\r\n                if (this.maxSpeed) {\r\n                    var currentSpeed = ParticleUtils_1.default.length(this.velocity);\r\n                    //if we are going faster than we should, clamp at the max speed\r\n                    //DO NOT recalculate vector length\r\n                    if (currentSpeed > this.maxSpeed) {\r\n                        ParticleUtils_1.default.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n                    }\r\n                }\r\n            }\r\n            //adjust position based on velocity\r\n            this.position.x += this.velocity.x * delta;\r\n            this.position.y += this.velocity.y * delta;\r\n        }\r\n        //interpolate color\r\n        if (this._doColor) {\r\n            this.tint = this.colorList.interpolate(lerp);\r\n        }\r\n        //update rotation\r\n        if (this.rotationSpeed !== 0) {\r\n            this.rotation += this.rotationSpeed * delta;\r\n        }\r\n        else if (this.acceleration && !this.noRotation) {\r\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x); // + Math.PI / 2;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Kills the particle, removing it from the display list\r\n     * and telling the emitter to recycle it.\r\n     * @method PIXI.particles.Particle#kill\r\n     */\r\n    Particle.prototype.kill = function () {\r\n        this.emitter.recycle(this);\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.Particle#destroy\r\n     */\r\n    Particle.prototype.destroy = function () {\r\n        if (this.parent)\r\n            this.parent.removeChild(this);\r\n        this.Sprite_destroy();\r\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\r\n            this.speedList = this.ease = this.next = this.prev = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time.\r\n     * @method PIXI.particles.Particle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\r\n     *                     Any strings in the array will be converted to Textures via\r\n     *                     Texture.fromImage().\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    Particle.parseArt = function (art) {\r\n        //convert any strings to Textures.\r\n        var i;\r\n        for (i = art.length; i >= 0; --i) {\r\n            if (typeof art[i] == \"string\")\r\n                art[i] = PIXI.Texture.fromImage(art[i]);\r\n        }\r\n        //particles from different base textures will be slower in WebGL than if they\r\n        //were from one spritesheet\r\n        if (ParticleUtils_1.default.verbose) {\r\n            for (i = art.length - 1; i > 0; --i) {\r\n                if (art[i].baseTexture != art[i - 1].baseTexture) {\r\n                    if (window.console)\r\n                        console.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return art;\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * Particle does nothing to the extra data.\r\n     * @method PIXI.particles.Particle.parseData\r\n     * @static\r\n     * @param  {Object} extraData The extra data from the particle config.\r\n     * @return {Object} The parsed extra data.\r\n     */\r\n    Particle.parseData = function (extraData) {\r\n        return extraData;\r\n    };\r\n    return Particle;\r\n}(Sprite));\r\nexports.default = Particle;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BLEND_MODES = PIXI.BLEND_MODES;\r\nvar PropertyNode_1 = require(\"./PropertyNode\");\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n * @memberof PIXI.particles\r\n * @class ParticleUtils\r\n * @static\r\n */\r\nvar ParticleUtils = {\r\n    /**\r\n     * If errors and warnings should be logged within the library.\r\n     * @name PIXI.particles.ParticleUtils.verbose\r\n     * @default false\r\n     * @static\r\n     */\r\n    verbose: false,\r\n    DEG_TO_RADS: Math.PI / 180,\r\n    /**\r\n     * Rotates a point by a given angle.\r\n     * @method PIXI.particles.ParticleUtils.rotatePoint\r\n     * @param {Number} angle The angle to rotate by in degrees\r\n     * @param {PIXI.Point} p The point to rotate around 0,0.\r\n     * @static\r\n     */\r\n    rotatePoint: function (angle, p) {\r\n        if (!angle)\r\n            return;\r\n        angle *= ParticleUtils.DEG_TO_RADS;\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        var xnew = p.x * c - p.y * s;\r\n        var ynew = p.x * s + p.y * c;\r\n        p.x = xnew;\r\n        p.y = ynew;\r\n    },\r\n    /**\r\n     * Combines separate color components (0-255) into a single uint color.\r\n     * @method PIXI.particles.ParticleUtils.combineRGBComponents\r\n     * @param {uint} r The red value of the color\r\n     * @param {uint} g The green value of the color\r\n     * @param {uint} b The blue value of the color\r\n     * @return {uint} The color in the form of 0xRRGGBB\r\n     * @static\r\n     */\r\n    combineRGBComponents: function (r, g, b /*, a*/) {\r\n        return /*a << 24 |*/ r << 16 | g << 8 | b;\r\n    },\r\n    /**\r\n     * Reduces the point to a length of 1.\r\n     * @method PIXI.particles.ParticleUtils.normalize\r\n     * @static\r\n     * @param {PIXI.Point} point The point to normalize\r\n     */\r\n    normalize: function (point) {\r\n        var oneOverLen = 1 / ParticleUtils.length(point);\r\n        point.x *= oneOverLen;\r\n        point.y *= oneOverLen;\r\n    },\r\n    /**\r\n     * Multiplies the x and y values of this point by a value.\r\n     * @method PIXI.particles.ParticleUtils.scaleBy\r\n     * @static\r\n     * @param {PIXI.Point} point The point to scaleBy\r\n     * @param {number} value The value to scale by.\r\n     */\r\n    scaleBy: function (point, value) {\r\n        point.x *= value;\r\n        point.y *= value;\r\n    },\r\n    /**\r\n     * Returns the length (or magnitude) of this point.\r\n     * @method PIXI.particles.ParticleUtils.length\r\n     * @static\r\n     * @param {PIXI.Point} point The point to measure length\r\n     * @return The length of this point.\r\n     */\r\n    length: function (point) {\r\n        return Math.sqrt(point.x * point.x + point.y * point.y);\r\n    },\r\n    /**\r\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n     * {r, g, b, (a)}.\r\n     * @method PIXI.particles.ParticleUtils.hexToRGB\r\n     * @param {string} color The input color string.\r\n     * @param {Object} [output] An object to put the output in. If omitted, a new object is created.\r\n     * @return The object with r, g, and b properties, possibly with an a property.\r\n     * @static\r\n     */\r\n    hexToRGB: function (color, output) {\r\n        if (!output)\r\n            output = {};\r\n        if (color.charAt(0) == \"#\")\r\n            color = color.substr(1);\r\n        else if (color.indexOf(\"0x\") === 0)\r\n            color = color.substr(2);\r\n        var alpha;\r\n        if (color.length == 8) {\r\n            alpha = color.substr(0, 2);\r\n            color = color.substr(2);\r\n        }\r\n        output.r = parseInt(color.substr(0, 2), 16); //Red\r\n        output.g = parseInt(color.substr(2, 2), 16); //Green\r\n        output.b = parseInt(color.substr(4, 2), 16); //Blue\r\n        if (alpha)\r\n            output.a = parseInt(alpha, 16);\r\n        return output;\r\n    },\r\n    /**\r\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n     * by the related tool at http://www.greensock.com/customease/.\r\n     * @method PIXI.particles.ParticleUtils.generateEase\r\n     * @param {Array} segments An array of segments, as created by\r\n     * http://www.greensock.com/customease/.\r\n     * @return {Function} A function that calculates the percentage of change at\r\n     *                    a given point in time (0-1 inclusive).\r\n     * @static\r\n     */\r\n    generateEase: function (segments) {\r\n        var qty = segments.length;\r\n        var oneOverQty = 1 / qty;\r\n        /*\r\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n         * @param {Number} time The time of the ease, 0-1 inclusive.\r\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n         *                  ease goes outside those bounds).\r\n         */\r\n        return function (time) {\r\n            var t, s;\r\n            var i = (qty * time) | 0; //do a quick floor operation\r\n            t = (time - (i * oneOverQty)) * qty;\r\n            s = segments[i] || segments[qty - 1];\r\n            return (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\r\n        };\r\n    },\r\n    /**\r\n     * Gets a blend mode, ensuring that it is valid.\r\n     * @method PIXI.particles.ParticleUtils.getBlendMode\r\n     * @param {string} name The name of the blend mode to get.\r\n     * @return {int} The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n     * @static\r\n     */\r\n    getBlendMode: function (name) {\r\n        if (!name)\r\n            return BLEND_MODES.NORMAL;\r\n        name = name.toUpperCase();\r\n        while (name.indexOf(\" \") >= 0)\r\n            name = name.replace(\" \", \"_\");\r\n        return BLEND_MODES[name] || BLEND_MODES.NORMAL;\r\n    },\r\n    /**\r\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n     * @method PIXI.particles.ParticleUtils.createSteppedGradient\r\n     * @param {Array} list The list of data to convert.\r\n     * @param {number} [numSteps=10] The number of steps to use.\r\n     * @return {PIXI.particles.PropertyNode} The blend mode as specified in the PIXI.blendModes enumeration.\r\n     * @static\r\n     */\r\n    createSteppedGradient: function (list, numSteps) {\r\n        if (numSteps === void 0) { numSteps = 10; }\r\n        if (typeof numSteps !== 'number' || numSteps <= 0)\r\n            numSteps = 10;\r\n        var first = new PropertyNode_1.default(list[0].value, list[0].time);\r\n        first.isStepped = true;\r\n        var currentNode = first;\r\n        var current = list[0];\r\n        var nextIndex = 1;\r\n        var next = list[nextIndex];\r\n        for (var i = 1; i < numSteps; ++i) {\r\n            var lerp = i / numSteps;\r\n            //ensure we are on the right segment, if multiple\r\n            while (lerp > next.time) {\r\n                current = next;\r\n                next = list[++nextIndex];\r\n            }\r\n            //convert the lerp value to the segment range\r\n            lerp = (lerp - current.time) / (next.time - current.time);\r\n            var curVal = ParticleUtils.hexToRGB(current.value);\r\n            var nextVal = ParticleUtils.hexToRGB(next.value);\r\n            var output = {};\r\n            output.r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n            output.g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n            output.b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n            currentNode.next = new PropertyNode_1.default(output, i / numSteps);\r\n            currentNode = currentNode.next;\r\n        }\r\n        //we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n        //the particle has died of old age\r\n        return first;\r\n    }\r\n};\r\nexports.default = ParticleUtils;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\r\nvar Particle_1 = require(\"./Particle\");\r\n/**\r\n * A helper point for math things.\r\n * @private\r\n */\r\nvar helperPoint = new PIXI.Point();\r\n//a hand picked list of Math functions (and a couple properties) that are allowable.\r\n//they should be used without the preceding \"Math.\"\r\nvar MATH_FUNCS = [\r\n    \"pow\",\r\n    \"sqrt\",\r\n    \"abs\",\r\n    \"floor\",\r\n    \"round\",\r\n    \"ceil\",\r\n    \"E\",\r\n    \"PI\",\r\n    \"sin\",\r\n    \"cos\",\r\n    \"tan\",\r\n    \"asin\",\r\n    \"acos\",\r\n    \"atan\",\r\n    \"atan2\",\r\n    \"log\"\r\n];\r\n//create an actual regular expression object from the string\r\nvar WHITELISTER = new RegExp([\r\n    //Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n    //as 'x', for the variable usage.\r\n    \"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\r\n].concat(MATH_FUNCS).join(\"|\"), \"g\");\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @method PIXI.particles.PathParticle~parsePath\r\n * @private\r\n * @static\r\n * @param {String} pathString The string to parse.\r\n * @return {Function} The path function - takes x, outputs y.\r\n */\r\nvar parsePath = function (pathString) {\r\n    var matches = pathString.match(WHITELISTER);\r\n    for (var i = matches.length - 1; i >= 0; --i) {\r\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n            matches[i] = \"Math.\" + matches[i];\r\n    }\r\n    pathString = matches.join(\"\");\r\n    return new Function(\"x\", \"return \" + pathString + \";\");\r\n};\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n *\r\n * @memberof PIXI.particles\r\n * @class PathParticle\r\n * @extends PIXI.particles.Particle\r\n * @constructor\r\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n */\r\nvar PathParticle = /** @class */ (function (_super) {\r\n    __extends(PathParticle, _super);\r\n    function PathParticle(emitter) {\r\n        var _this = _super.call(this, emitter) || this;\r\n        _this.path = null;\r\n        _this.initialRotation = 0;\r\n        _this.initialPosition = new PIXI.Point();\r\n        _this.movement = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Initializes the particle for use, based on the properties that have to\r\n     * have been set already on the particle.\r\n     * @method PIXI.particles.PathParticle#init\r\n     */\r\n    PathParticle.prototype.init = function () {\r\n        //get initial rotation before it is converted to radians\r\n        this.initialRotation = this.rotation;\r\n        //standard init\r\n        this.Particle_init();\r\n        //set the path for the particle\r\n        this.path = this.extraData.path;\r\n        //cancel the normal movement behavior\r\n        this._doNormalMovement = !this.path;\r\n        //reset movement\r\n        this.movement = 0;\r\n        //grab position\r\n        this.initialPosition.x = this.position.x;\r\n        this.initialPosition.y = this.position.y;\r\n    };\r\n    /**\r\n     * Updates the particle.\r\n     * @method PIXI.particles.PathParticle#update\r\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\r\n     */\r\n    PathParticle.prototype.update = function (delta) {\r\n        var lerp = this.Particle_update(delta);\r\n        //if the particle died during the update, then don't bother\r\n        if (lerp >= 0 && this.path) {\r\n            //increase linear movement based on speed\r\n            var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n            this.movement += speed * delta;\r\n            //set up the helper point for rotation\r\n            helperPoint.x = this.movement;\r\n            helperPoint.y = this.path(this.movement);\r\n            ParticleUtils_1.default.rotatePoint(this.initialRotation, helperPoint);\r\n            this.position.x = this.initialPosition.x + helperPoint.x;\r\n            this.position.y = this.initialPosition.y + helperPoint.y;\r\n        }\r\n        return lerp;\r\n    };\r\n    /**\r\n     * Destroys the particle, removing references and preventing future use.\r\n     * @method PIXI.particles.PathParticle#destroy\r\n     */\r\n    PathParticle.prototype.destroy = function () {\r\n        this.Particle_destroy();\r\n        this.path = this.initialPosition = null;\r\n    };\r\n    /**\r\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n     * @method PIXI.particles.PathParticle.parseArt\r\n     * @static\r\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\r\n     *                     Any strings in the array will be converted to Textures via\r\n     *                     Texture.fromImage().\r\n     * @return {Array} The art, after any needed modifications.\r\n     */\r\n    PathParticle.parseArt = function (art) {\r\n        return Particle_1.default.parseArt(art);\r\n    };\r\n    /**\r\n     * Parses extra emitter data to ensure it is set up for this particle class.\r\n     * PathParticle checks for the existence of path data, and parses the path data for use\r\n     * by particle instances.\r\n     * @method PIXI.particles.PathParticle.parseData\r\n     * @static\r\n     * @param  {Object} extraData The extra data from the particle config.\r\n     * @return {Object} The parsed extra data.\r\n     */\r\n    PathParticle.parseData = function (extraData) {\r\n        var output = {};\r\n        if (extraData && extraData.path) {\r\n            try {\r\n                output.path = parsePath(extraData.path);\r\n            }\r\n            catch (e) {\r\n                if (ParticleUtils_1.default.verbose)\r\n                    console.error(\"PathParticle: error in parsing path expression\");\r\n                output.path = null;\r\n            }\r\n        }\r\n        else {\r\n            if (ParticleUtils_1.default.verbose)\r\n                console.error(\"PathParticle requires a path string in extraData!\");\r\n            output.path = null;\r\n        }\r\n        return output;\r\n    };\r\n    return PathParticle;\r\n}(Particle_1.default));\r\nexports.default = PathParticle;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\r\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n * @memberof PIXI.particles\r\n * @class PropertyList\r\n * @constructor\r\n * @param {boolean} isColor If this list handles color values\r\n */\r\nvar PropertyList = /** @class */ (function () {\r\n    function PropertyList(isColor) {\r\n        if (isColor === void 0) { isColor = false; }\r\n        this.current = null;\r\n        this.next = null;\r\n        this.isColor = !!isColor;\r\n        this.interpolate = null;\r\n        this.ease = null;\r\n    }\r\n    /**\r\n     * Resets the list for use.\r\n     * @method interpolate\r\n     * @param {PIXI.particles.PropertyNode} first The first node in the list.\r\n     * @param {boolean} [isStepped=false] If the values should be stepped instead of interpolated linearly.\r\n     */\r\n    PropertyList.prototype.reset = function (first) {\r\n        this.current = first;\r\n        this.next = first.next;\r\n        var isSimple = this.next && this.next.time >= 1;\r\n        if (isSimple) {\r\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n        }\r\n        else if (first.isStepped) {\r\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n        }\r\n        else {\r\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n        }\r\n        this.ease = this.current.ease;\r\n    };\r\n    return PropertyList;\r\n}());\r\nexports.default = PropertyList;\r\nfunction intValueSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorSimple(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    return (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\nfunction intColorComplex(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    //convert the lerp value to the segment range\r\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n    var curVal = this.current.value, nextVal = this.next.value;\r\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\r\n}\r\nfunction intValueStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    return this.current.value;\r\n}\r\nfunction intColorStepped(lerp) {\r\n    if (this.ease)\r\n        lerp = this.ease(lerp);\r\n    //make sure we are on the right segment\r\n    while (this.next && lerp > this.next.time) {\r\n        this.current = this.next;\r\n        this.next = this.next.next;\r\n    }\r\n    var curVal = this.current.value;\r\n    return ParticleUtils_1.default.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\r\n/**\r\n * A single node in a PropertyList.\r\n * @memberof PIXI.particles\r\n * @class PropertyNode\r\n * @constructor\r\n * @param {number|string} value The value for this node\r\n * @param {number} time The time for this node, between 0-1\r\n * @param {Function|Array} [ease] Custom ease for this list. Only relevant for the first node.\r\n */\r\nvar PropertyNode = /** @class */ (function () {\r\n    function PropertyNode(value, time, ease) {\r\n        this.value = typeof value == \"string\" ? ParticleUtils_1.default.hexToRGB(value) : value;\r\n        this.time = time;\r\n        this.next = null;\r\n        this.isStepped = false;\r\n        if (ease) {\r\n            this.ease = typeof ease == \"function\" ? ease : ParticleUtils_1.default.generateEase(ease);\r\n        }\r\n        else {\r\n            this.ease = null;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n     * {start, end}.\r\n     * @method PIXI.particles.PropertyNode.createListFromArray\r\n     * @static\r\n     * @param  {Object} data The data for the list.\r\n     * @param  {Array} data.list The array of value and time objects.\r\n     * @param  {boolean} [data.isStepped] If the list is stepped rather than interpolated.\r\n     * @param  {Function|Array} [data.ease] Custom ease for this list.\r\n     * @return {PIXI.particles.PropertyNode} The first node in the list\r\n     */\r\n    PropertyNode.createList = function (data) {\r\n        if (Array.isArray(data.list)) {\r\n            var array = data.list;\r\n            var node = void 0, first = void 0;\r\n            first = node = new PropertyNode(array[0].value, array[0].time, data.ease);\r\n            //only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n            if (array.length > 2 || (array.length === 2 && array[1].value !== array[0].value)) {\r\n                for (var i = 1; i < array.length; ++i) {\r\n                    node.next = new PropertyNode(array[i].value, array[i].time);\r\n                    node = node.next;\r\n                }\r\n            }\r\n            first.isStepped = !!data.isStepped;\r\n            return first;\r\n        }\r\n        else {\r\n            //Handle deprecated version here\r\n            var start = new PropertyNode(data.start, 0);\r\n            //only set up a next value if it is different from the starting value\r\n            if (data.end !== data.start)\r\n                start.next = new PropertyNode(data.end, 1);\r\n            return start;\r\n        }\r\n    };\r\n    return PropertyNode;\r\n}());\r\nexports.default = PropertyNode;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ParticleUtils_js_1 = require(\"./ParticleUtils.js\");\r\nexports.ParticleUtils = ParticleUtils_js_1.default;\r\nvar Particle_js_1 = require(\"./Particle.js\");\r\nexports.Particle = Particle_js_1.default;\r\nvar Emitter_js_1 = require(\"./Emitter.js\");\r\nexports.Emitter = Emitter_js_1.default;\r\nvar PathParticle_js_1 = require(\"./PathParticle.js\");\r\nexports.PathParticle = PathParticle_js_1.default;\r\nvar AnimatedParticle_js_1 = require(\"./AnimatedParticle.js\");\r\nexports.AnimatedParticle = AnimatedParticle_js_1.default;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// If we're in the browser make sure PIXI is available\r\nif (typeof PIXI === 'undefined') {\r\n    throw \"pixi-particles requires pixi.js to be loaded first\";\r\n}\r\n//ensure that the particles namespace exist - PIXI 4 creates it itself, PIXI 3 does not\r\nif (!PIXI.particles) {\r\n    PIXI.particles = {};\r\n}\r\n// get the library itself\r\nvar particles = require(\"./particles\");\r\n// insert the library into the particles namespace on PIXI\r\nfor (var prop in particles) {\r\n    PIXI.particles[prop] = particles[prop];\r\n}\r\nif (typeof module !== \"undefined\" && module.exports) {\r\n    module.exports = particles;\r\n}\r\n"],"sourceRoot":"."}